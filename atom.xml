<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yfwin.github.io</id>
    <title>逸风小站</title>
    <updated>2021-10-22T15:46:59.314Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yfwin.github.io"/>
    <link rel="self" href="https://yfwin.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://yfwin.github.io/images/avatar.png</logo>
    <icon>https://yfwin.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 逸风小站</rights>
    <entry>
        <title type="html"><![CDATA[收集一波工具]]></title>
        <id>https://yfwin.github.io/LFGguQRzl/</id>
        <link href="https://yfwin.github.io/LFGguQRzl/">
        </link>
        <updated>2021-10-21T15:29:36.000Z</updated>
        <content type="html"><![CDATA[<h2 id="博客平台">博客平台</h2>
<h3 id="halo">halo</h3>
<p>https://halo.run/</p>
<h3 id="gridea">Gridea</h3>
<p>https://gridea.dev/</p>
<h3 id="hugo">Hugo</h3>
<p>https://www.gohugo.org/<br>
https://zhuanlan.zhihu.com/p/126298572</p>
<h3 id="volantis5">Volantis5</h3>
<p>https://volantis.js.org/</p>
<h2 id="音乐工具">音乐工具</h2>
<h3 id="音乐直链搜索">音乐直链搜索</h3>
<p>https://music.liuzhijin.cn/</p>
<h2 id="其它工具">其它工具</h2>
<h3 id="hosts工具-switchhosts">Hosts工具 SwitchHosts</h3>
<p>https://github.com/oldj/SwitchHosts/blob/master/README_cn.md<br>
https://swh.app/zh/</p>
<h3 id="查询-github-最新-hosts">查询 GitHub 最新 Hosts</h3>
<p>https://raw.hellogithub.com/hosts</p>
<h3 id="github-hosts-配置">GitHub Hosts 配置</h3>
<p>https://github.com/521xueweihan/GitHub520<br>
https://www.cnblogs.com/rxbook/p/15241501.html</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hosts自动刷新工具SwitchHosts]]></title>
        <id>https://yfwin.github.io/xMi8ZJTVm/</id>
        <link href="https://yfwin.github.io/xMi8ZJTVm/">
        </link>
        <updated>2021-10-19T15:48:31.000Z</updated>
        <summary type="html"><![CDATA[<p>国内访问 GitHub 屡屡被墙，虽然配置 Hosts 可以访问，但是每过一段时间就得手动刷新一下 Hosts，十分的麻烦，那么，你可以选择使用 SwitchHosts，一款自动刷新 Hosts 的管理工具。</p>
]]></summary>
        <content type="html"><![CDATA[<p>国内访问 GitHub 屡屡被墙，虽然配置 Hosts 可以访问，但是每过一段时间就得手动刷新一下 Hosts，十分的麻烦，那么，你可以选择使用 SwitchHosts，一款自动刷新 Hosts 的管理工具。</p>
<!-- more -->
<h1 id="switchhosts">SwitchHosts</h1>
<ul>
<li><a href="README.md">English</a></li>
</ul>
<p>项目主页：<a href="https://swh.app">https://swh.app</a></p>
<p>SwitchHosts 是一个管理 hosts 文件的应用，基于 <a href="http://electron.atom.io/">Electron</a><br>
、<a href="https://facebook.github.io/react/">React</a>、<a href="https://umijs.org/">UmiJS</a><br>
、<a href="https://chakra-ui.com/">Chakra UI</a>、<a href="http://codemirror.net/">CodeMirror</a> 等技术开发。</p>
<h2 id="截图">截图</h2>
<img src="https://raw.githubusercontent.com/oldj/SwitchHosts/master/screenshots/sh_light.png" alt="Capture" width="960">
<h2 id="功能特性">功能特性</h2>
<ul>
<li>快速切换 hosts 方案</li>
<li>hosts 语法高亮</li>
<li>支持从网络加载远程 hosts 配置</li>
<li>可从系统菜单栏图标快速切换 hosts</li>
</ul>
<h2 id="安装">安装</h2>
<h3 id="下载">下载</h3>
<p>你可以下载源码并自行构建，也可以从以下地址下载已构建好的版本：</p>
<ul>
<li><a href="https://github.com/oldj/SwitchHosts/releases">SwitchHosts Download Page (GitHub release)</a></li>
</ul>
<h2 id="数据备份">数据备份</h2>
<p>SwitchHosts 的数据文件存储于 <code>~/.SwitchHosts</code> (Windows 下存储于用户个人文件夹下的 <code>.SwitchHosts</code> 文件夹），<br>
其中 <code>~/.SwitchHosts/data</code> 文件夹包含数据，<code>~/.SwitchHosts/config</code> 文件夹包含各项配置信息。</p>
<h2 id="开发以及构建">开发以及构建</h2>
<h3 id="开发">开发</h3>
<ul>
<li>安装 <a href="https://nodejs.org/">Node.js</a></li>
<li>在项目根目录 <code>./</code> 下，运行 <code>npm install</code> 命令安装依赖</li>
<li>运行 <code>npm run dev</code> 命令启动开发服务</li>
<li>运行 <code>npm run start</code> 启动 App，即可开始开发及调试</li>
</ul>
<h3 id="构建及打包">构建及打包</h3>
<ul>
<li>推荐使用 <a href="https://github.com/electron-userland/electron-builder">electron-builder</a> 进行打包</li>
<li>转到项目根目录 './'</li>
<li>运行 <code>npm run build</code></li>
<li>运行 <code>npm run make</code>，如果一切顺利，可在 <code>./dist</code> 目录下找到打包后的文件</li>
<li>首次运行可能需要花费一些时间，因为需要下载相关依赖文件。你也可以从 <a href="https://github.com/electron/electron/releases">这儿</a><br>
或者 <a href="https://npm.taobao.org/mirrors/electron/">淘宝镜像</a> 手动下载，并保存到 <code>~/.electron</code><br>
目录下。更多信息可访问 <a href="http://electron.atom.io/docs/">Electron 文档</a>。</li>
</ul>
<pre><code class="language-bash"># build
npm run build

# make
npm run make # the packed files will be in ./dist
</code></pre>
<h2 id="版权">版权</h2>
<p>SwitchHosts 是一个免费开源软件，基于 Apache-2.0 协议发布。</p>
<!-- more -->
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScript性能优化技巧]]></title>
        <id>https://yfwin.github.io/javascript-xing-neng-you-hua-ji-qiao/</id>
        <link href="https://yfwin.github.io/javascript-xing-neng-you-hua-ji-qiao/">
        </link>
        <updated>2021-10-17T15:03:17.000Z</updated>
        <content type="html"><![CDATA[<p>##数字转换成字符串<br>
最好用<code>''+ 数字</code>来将数字转换成字符串，虽然看起来比较丑一点，但事实上这个效率是最高的，性能上来说：1</p>
<pre><code>('' +) &gt; String() &gt; .toString() &gt; new String()
</code></pre>
<h2 id="避免与null进行比较">避免与null进行比较</h2>
<p>由于JavaScript是弱类型的，所以它不会做任何的自动类型检查，所以如果看到与null进行比较的代码，尝试使用以下技术替换：</p>
<p>1、如果值应为一个引用类型，使用instanceof操作符检查其构造函数<br>
2、如果值应为一个基本类型，作用typeof检查其类型<br>
3、如果是希望对象包含某个特定的方法名，则使用typeof操作符确保指定名字的方法存在于对象上</p>
<h2 id="字符串连接">字符串连接</h2>
<p>如果要连接多个字符串，应该少使用+=，如</p>
<pre><code>s+=a;
s+=b;
s+=c;
</code></pre>
<p>应该写成</p>
<pre><code>s+=a + b + c；
</code></pre>
<p>而如果是收集字符串，比如多次对同一个字符串进行+=操作的话，最好使用一个缓存，使用JavaScript数组来收集，最后使用join方法连接起来</p>
<pre><code>var buf = [];
for (var i = 0; i &lt; 100; i++) {
	buf.push(i.toString());
}
var all = buf.join(&quot;&quot;);
</code></pre>
<h2 id="各种类型转换">各种类型转换</h2>
<pre><code>var myVar = &quot;3.14159&quot;,
        str = &quot;&quot; + myVar, //  to string  
        i_int = ~ ~myVar,  //  to integer  
        f_float = 1 * myVar,  //  to float  
        b_bool = !!myVar,  /*  to boolean - any string with length and any number except 0 are true */
        array = [myVar];  //  to array
</code></pre>
<p>如果定义了toString()方法来进行类型转换的话，推荐显式调用toString()，因为内部的操作在尝试所有可能性之后，会尝试对象的toString()方法尝试能否转化为String，所以直接调用这个方法效率会更高</p>
<h2 id="多个类型声明">多个类型声明</h2>
<p>在JavaScript中所有变量都可以使用单个var语句来声明，这样就是组合在一起的语句，以减少整个脚本的执行时间，就如上面代码一样，上面代码格式也挺规范，让人一看就明了。</p>
<h2 id="插入迭代器">插入迭代器</h2>
<p>如var name=values[i]; i++;前面两条语句可以写成var name=values[i++]</p>
<h2 id="使用直接量">使用直接量</h2>
<pre><code>var aTest = new Array(); //替换为
var aTest = [];

var aTest = new Object; //替换为
var aTest = {};

var reg = new RegExp(); //替换为
var reg = /../;

//如果要创建具有一些特性的一般对象，也可以使用字面量，如下：
var oFruit = new O;
oFruit.color = &quot;red&quot;;
oFruit.name = &quot;apple&quot;;
//前面的代码可用对象字面量来改写成这样：
var oFruit = { color: &quot;red&quot;, name: &quot;apple&quot; };
</code></pre>
<h2 id="缩短否定检测">缩短否定检测</h2>
<pre><code> if (oTest != '#ff0000') {
	//do something
}
if (oTest != null) {
	//do something
}
if (oTest != false) {
	//do something
}
//虽然这些都正确，但用逻辑非操作符来操作也有同样的效果：
if (!oTest) {
	//do something
}
</code></pre>
<h2 id="尽量使用原生方法">尽量使用原生方法</h2>
<h2 id="switch语句相对if较快">switch语句相对if较快</h2>
<p>通过将case语句按照最可能到最不可能的顺序进行组织</p>
<h2 id="位运算较快">位运算较快</h2>
<p>当进行数字运算时，位运算操作要比任何布尔运算或者算数运算快</p>
<h2 id="巧用和布尔运算符">巧用||和&amp;&amp;布尔运算符</h2>
<pre><code> function eventHandler(e) {
     if (!e) e = window.event;
      }
      //可以替换为：
      function eventHandler(e) {
          e = e || window.event;
      }
	  
    if (myobj) {
            doSomething(myobj);
      }
	//可以替换为：
	myobj &amp;&amp; doSomething(myobj);
</code></pre>
<h2 id="每条语句末尾须加分号">每条语句末尾须加分号</h2>
<p>在if语句中，即使条件表达式只有一条语句也要用{}把它括起来，以免后续如果添加了语句之后造成逻辑错误</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://yfwin.github.io/hello-gridea/</id>
        <link href="https://yfwin.github.io/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>